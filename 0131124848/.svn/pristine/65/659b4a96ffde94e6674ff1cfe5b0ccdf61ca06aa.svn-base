
// 0131124848Dlg.cpp : 实现文件
//

#include "stdafx.h"
#include "0131124848.h"
#include "0131124848Dlg.h"
#include "afxdialogex.h"
#include<windows.h>
#include<mmsystem.h>
#pragma comment(lib,"WINMM.LIB")

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CMy0131124848Dlg 对话框



CMy0131124848Dlg::CMy0131124848Dlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CMy0131124848Dlg::IDD, pParent)
	, ShowTime(_T(""))
	, ExamNumber(_T(""))
	, IDNumber(_T(""))
	, WriteIn(_T(""))
	, choose(_T(""))
	, aa(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}
MCI_OPEN_PARMS op;
DWORD cdlen;
UINT m_ulCount;
void CMy0131124848Dlg::OnPlay()
{ 
	// TODO: Add your command handler code here  
	UpdateData(true);
	int nIndex = ComboBox.GetCurSel();
	CString strCBText,temp="D:\\";
	ComboBox.GetLBText(nIndex, strCBText);
	temp += strCBText;
	temp+= ".mp3";
	mciSendString(_T("close wave"), 0, 0, NULL);
	mciSendCommand(m_ulCount, MCI_CLOSE, 0, NULL);//向多媒体设备发送消息，关闭多媒体设备   
	MCI_OPEN_PARMS mciopenparms;//打开   
	MCI_PLAY_PARMS mciplayparms;//播放   
	mciopenparms.lpstrElementName = temp;//播放路径   

	mciopenparms.lpstrDeviceType = NULL;//文件类型   
	mciSendCommand(0, MCI_OPEN, MCI_DEVTYPE_WAVEFORM_AUDIO, (DWORD)(LPVOID)&mciopenparms);//向MCI设备发送命令消息，包含歌曲文件的类型和路径   
	m_ulCount = mciopenparms.wDeviceID;//多媒体设备类型编号   
	mciplayparms.dwCallback = (DWORD)GetSafeHwnd();//歌曲播放支持类型   
	DWORD cdlen = 0;//某个音频文件的总时间长度   
	cdlen = getinfo(MCI_STATUS_LENGTH);    //得到曲目长度
	DWORD cdfrom = 0;
	DWORD cdto = 0;//歌曲的起点和终点 
	cdto = MCI_MAKE_HMS(MCI_HMS_HOUR(cdlen), MCI_HMS_MINUTE(cdlen), MCI_HMS_SECOND(cdlen));//设置播放完毕某音频文件需要的时间n时n分n秒     
	mciplayparms.dwFrom = cdfrom;
	mciplayparms.dwTo = cdto;
	mciSendCommand(m_ulCount, MCI_PLAY, MCI_TO | MCI_FROM, (DWORD)(LPVOID)& mciplayparms);//向多媒体设备发送播放文件命令   
}
DWORD CMy0131124848Dlg::getinfo(DWORD item)
{
	MCI_STATUS_PARMS mcistatusparms;//MCI接口对象的状态
	mcistatusparms.dwCallback = (DWORD)GetSafeHwnd();//歌曲格式
	mcistatusparms.dwItem = item;//待获取的项目
	mcistatusparms.dwReturn = 0;
	mciSendCommand(m_ulCount, MCI_STATUS, MCI_STATUS_ITEM, (DWORD)&mcistatusparms);
	return mcistatusparms.dwReturn;
}
void CMy0131124848Dlg::OnStop()
{
	// TODO: Add your control notification handler code here
	//在WM_CLOSE消息处理过程中发送MCI_CLOSE命令关闭设备
	MCI_GENERIC_PARMS gp;
	gp.dwCallback = NULL;
	mciSendCommand(op.wDeviceID, MCI_CLOSE, MCI_WAIT, (DWORD)&gp);
}
void CMy0131124848Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_EDIT3ST, ShowTime);
	//  DDX_Control(pDX, IDC_EDIT5WI, WriteIn);
	//  DDX_Text(pDX, IDC_EDIT4ERN, ExamNumber);
	//  DDX_Text(pDX, IDC_EDIT2IDN, IDNumber);
	DDX_Text(pDX, IDC_EDIT5WI, WriteIn);
	DDX_Control(pDX, IDC_COMBO1EN, ComboBox);
	DDX_Control(pDX, IDC_EDIT5WI, writein);
	DDX_Text(pDX, IDC_EDIT2IDN, IDNumber);
	DDV_MaxChars(pDX, IDNumber, 18);
	DDX_Text(pDX, IDC_EDIT4ERN, ExamNumber);
	DDV_MaxChars(pDX, ExamNumber, 11);
	DDX_Control(pDX, IDC_EDIT2IDN, idnumber);
	DDX_Control(pDX, IDC_EDIT4ERN, examnumber);
	DDX_CBString(pDX, IDC_COMBO1EN, choose);
}

BEGIN_MESSAGE_MAP(CMy0131124848Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDCANCEL, &CMy0131124848Dlg::OnBnClickedCancel)
	ON_BN_CLICKED(IDC_BUTTON2BT, &CMy0131124848Dlg::OnBnClickedButton2bt)
	ON_BN_CLICKED(IDOK, &CMy0131124848Dlg::OnBnClickedOk)
END_MESSAGE_MAP()


// CMy0131124848Dlg 消息处理程序

BOOL CMy0131124848Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();
	CString strTemp;
	((CComboBox*)GetDlgItem(IDC_COMBO1EN))->ResetContent(); //消除ID为IDC_COMBO_CF现有所有内容
	for (int i = 1; i <= 10; i++)
	{
		strTemp .Format("%d",i);
		((CComboBox*)GetDlgItem(IDC_COMBO1EN))->AddString(strTemp); //为控件添加初始化数据
	}
	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO:  在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CMy0131124848Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CMy0131124848Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CMy0131124848Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CMy0131124848Dlg::OnBnClickedCancel()
{
	// TODO:  在此添加控件通知处理程序代码
	CDialogEx::OnCancel();
}


void CMy0131124848Dlg::OnBnClickedButton2bt()
{
	// TODO:  在此添加控件通知处理程序代码
	OnPlay();
	UpdateData(true);
	if (ExamNumber.GetLength()!= 11||IDNumber.GetLength()!=18)
	{
		MessageBox("准考证号或者身份证号长度不够！");
		return;
	}
	WriteIn = "请在下面区域输入您听到的内容......";
	writein.SetSel(-1, -1);      //自动滚屏 
	writein.ReplaceSel(WriteIn+ " ");   // sNewString会接edit里的数据继续添加，且自动换行 
	idnumber.SetReadOnly(true);
	examnumber.SetReadOnly(true);
	UpdateData(false);

}


void CMy0131124848Dlg::OnBnClickedOk()
{
	// TODO:  在此添加控件通知处理程序代码
	CDialogEx::OnOK();
}
