
// 0131124848Dlg.cpp : 实现文件
//

#include "stdafx.h"
#include "0131124848.h"
#include "0131124848Dlg.h"
#include "afxdialogex.h"
#include <windows.h>
#include <mmsystem.h>
#pragma comment(lib,"WINMM.LIB")

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
public:
	afx_msg void OnBnClickedOk();
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)

	ON_BN_CLICKED(IDOK, &CAboutDlg::OnBnClickedOk)
//ON_WM_SETFOCUS()
//ON_WM_LBUTTONDOWN()
END_MESSAGE_MAP()


// CMy0131124848Dlg 对话框


CMy0131124848Dlg::CMy0131124848Dlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CMy0131124848Dlg::IDD, pParent)
	, ShowTime(_T(""))
	, ExamNumber(_T(""))
	, IDNumber(_T(""))
	, WriteIn(_T(""))
	, choose(_T(""))
	, aa(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}
MCI_OPEN_PARMS op;
DWORD cdlen;
UINT m_ulCount; 


void CMy0131124848Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_EDIT3ST, ShowTime);
	//  DDX_Control(pDX, IDC_EDIT5WI, WriteIn);
	//  DDX_Text(pDX, IDC_EDIT4ERN, ExamNumber);
	//  DDX_Text(pDX, IDC_EDIT2IDN, IDNumber);
	DDX_Text(pDX, IDC_EDIT5WI, WriteIn);
	DDX_Control(pDX, IDC_COMBO1EN, ComboBox);
	DDX_Control(pDX, IDC_EDIT5WI, writein);
	DDX_Text(pDX, IDC_EDIT2IDN, IDNumber);
	DDV_MaxChars(pDX, IDNumber, 18);
	DDX_Text(pDX, IDC_EDIT4ERN, ExamNumber);
	DDV_MaxChars(pDX, ExamNumber, 11);
	DDX_Control(pDX, IDC_EDIT2IDN, idnumber);
	DDX_Control(pDX, IDC_EDIT4ERN, examnumber);
	DDX_CBString(pDX, IDC_COMBO1EN, choose);
}

BEGIN_MESSAGE_MAP(CMy0131124848Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON2BT, &CMy0131124848Dlg::OnBnClickedButton2bt)
//	ON_WM_SETFOCUS()
//	ON_WM_TIMER()
ON_BN_CLICKED(IDC_BUTTON3SM, &CMy0131124848Dlg::OnBnClickedButton3sm)
ON_WM_TIMER()
ON_WM_CTLCOLOR()
ON_BN_CLICKED(IDC_BUTTON4PT, &CMy0131124848Dlg::OnBnClickedButton4pt)
ON_WM_SETFOCUS()
ON_EN_SETFOCUS(IDC_EDIT5WI, &CMy0131124848Dlg::OnEnSetfocusEdit5wi)
END_MESSAGE_MAP()


// CMy0131124848Dlg 消息处理程序

BOOL CMy0131124848Dlg::OnInitDialog()
{

	m_brush.CreateSolidBrush(RGB(0,255,0));
	CDialogEx::OnInitDialog();
	CString strTemp;
	((CComboBox*)GetDlgItem(IDC_COMBO1EN))->ResetContent(); //消除ID为IDC_COMBO_CF现有所有内容
	for (int i = 1; i <= 11; i++)
	{
		strTemp .Format("%d",i);
		((CComboBox*)GetDlgItem(IDC_COMBO1EN))->AddString(strTemp); //为控件添加初始化数据
	}
	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	writein.SetReadOnly(true);
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标
	SetTimer(1,1000,0);
	// TODO:  在此添加额外的初始化代码
	//读模式构造函数，在自身目录下建立文件,不存在就创建，创建时不修改原有内容
	CFile file(_T("D:\\test\\anwser.txt"), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeRead);
	//暂存字符数组
	char* ptchBuffer = NULL;
	//统计字的个数
	int nCount = file.GetLength();
	//+1来用于最后的终止符
	ptchBuffer = new char[nCount + 1];
	ptchBuffer[nCount] = '\0';
	//读入
	file.Read(ptchBuffer, file.GetLength());
	//自动转换
	answer = ptchBuffer;
	//因为有new就要有delete，所以要释放内存；
	if (NULL != ptchBuffer)
	{
		delete[] ptchBuffer;
		ptchBuffer = NULL;
	}
	//测试用看看是否正确读取
	MessageBox(answer);
	file.Close();
	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CMy0131124848Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CMy0131124848Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。


HCURSOR CMy0131124848Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


void CMy0131124848Dlg::OnPlay()
{
	// TODO: Add your command handler code here  
	UpdateData(true);
	int nIndex = ComboBox.GetCurSel();
	CString strCBText, temp = "D:\\test\\";
	ComboBox.GetLBText(nIndex, strCBText);
	temp += strCBText;
	temp += ".mp3";
	mciSendString(_T("close wave"), 0, 0, NULL);
	mciSendCommand(m_ulCount, MCI_CLOSE, 0, NULL);//向多媒体设备发送消息，关闭多媒体设备   
	MCI_OPEN_PARMS mciopenparms;//打开   
	MCI_PLAY_PARMS mciplayparms;//播放   
	mciopenparms.lpstrElementName = temp;//播放路径   
	mciopenparms.lpstrDeviceType = NULL;//文件类型   
	mciSendCommand(0, MCI_OPEN, MCI_DEVTYPE_WAVEFORM_AUDIO, (DWORD)(LPVOID)&mciopenparms);//向MCI设备发送命令消息，包含歌曲文件的类型和路径   
	m_ulCount = mciopenparms.wDeviceID;//多媒体设备类型编号   
	mciplayparms.dwCallback = (DWORD)GetSafeHwnd();//歌曲播放支持类型   
	DWORD cdlen = 0;//某个音频文件的总时间长度   
	cdlen = getinfo(MCI_STATUS_LENGTH);    //得到曲目长度
	DWORD cdfrom = 0;
	DWORD cdto = 0;//歌曲的起点和终点 
	cdto = MCI_MAKE_HMS(MCI_HMS_HOUR(cdlen), MCI_HMS_MINUTE(cdlen), MCI_HMS_SECOND(cdlen));//设置播放完毕某音频文件需要的时间n时n分n秒     
	mciplayparms.dwFrom = cdfrom;
	mciplayparms.dwTo = cdto;
	mciSendCommand(m_ulCount, MCI_PLAY, MCI_TO | MCI_FROM, (DWORD)(LPVOID)& mciplayparms);//向多媒体设备发送播放文件命令   
	UpdateData(false);
}


DWORD CMy0131124848Dlg::getinfo(DWORD item)
{
	MCI_STATUS_PARMS mcistatusparms;//MCI接口对象的状态
	mcistatusparms.dwCallback = (DWORD)GetSafeHwnd();//歌曲格式
	mcistatusparms.dwItem = item;//待获取的项目0
	mcistatusparms.dwReturn = 0;
	mciSendCommand(m_ulCount, MCI_STATUS, MCI_STATUS_ITEM, (DWORD)&mcistatusparms);
	return mcistatusparms.dwReturn;
}


void CMy0131124848Dlg::OnBnClickedButton2bt()//开始考试按钮
{
	// TODO:  在此添加控件通知处理程序代码
	UpdateData(true);
	{
		int nIndex = ComboBox.GetCurSel();
		CString strCBText, temp = "D:\\test\\";
		ComboBox.GetLBText(nIndex, strCBText);
		ComboBox.GetLBText(nIndex, strCBText);
		temp += "1.ini";
		GetPrivateProfileString("ExamInfo", "total_minutes", "", total_minutes.GetBufferSetLength(20), 20, temp);
		total_minutes.ReleaseBuffer();
		total_question = GetPrivateProfileInt("ExamInfo", "total_question", 0, temp);
		GetPrivateProfileString("ExamInfo", "audio_format", "", audio_format.GetBufferSetLength(20), 20, temp);
		audio_format.ReleaseBuffer();
		max_speed = GetPrivateProfileInt("ExamInfo", "total_question", 0, temp);
		GetPrivateProfileString("ExamInfo", "percentage_accuracy", "", percentage_accuracy.GetBufferSetLength(20), 20, temp);
		percentage_accuracy.ReleaseBuffer();
		GetPrivateProfileString("ExamInfo", "percentage_speed", "", percentage_speed.GetBufferSetLength(20), 20, temp);
		percentage_speed.ReleaseBuffer(); 
	}//读取配置文件
	if (ExamNumber.GetLength()!= 11||IDNumber.GetLength()!=18)
	{
		MessageBox("准考证号或者身份证号长度不够！无法进行考试！");
		return;
	}
	OnPlay();
	WriteIn = "请在以下输入您听到的答案";
	GetDlgItem(IDC_COMBO1EN)->EnableWindow(FALSE);
	writein.SetReadOnly(false);
	idnumber.SetReadOnly(true);
	examnumber.SetReadOnly(true);
	DWORD k = getinfo(MCI_STATUS_LENGTH);
	int hm = k / 3600000;
	int ms = (k - 3600000 * hm) / 60000;
	int se = (k - 3600000 * hm - 60000 * ms) / 1000;
	count = ms * 60 + se;
	sumTimer = ms * 60 + se;
	UpdateData(false);
	CButton *pBtn = (CButton *)GetDlgItem(IDC_BUTTON2BT);
	if (pBtn != NULL)
	{
		pBtn->EnableWindow(false);
	}
}


void CMy0131124848Dlg::OnBnClickedButton3sm()//提交按钮
{
	// TODO:  在此添加控件通知处理程序代码
	result = MessageBox(TEXT("提交以后您的本次考试将结束.\r\n您确定提交吗？"), TEXT("提示"), MB_ICONINFORMATION | MB_YESNO);
	if (result == 6)
	{
		count = 0;
		MCI_GENERIC_PARMS gp;
		gp.dwCallback = NULL;
		mciSendCommand(m_ulCount, MCI_CLOSE, MCI_WAIT, (DWORD)&gp);
		CString str = "\r\n您考试所用时间为\r\n\r\n", str1, str2, str3;
		str1.Format("%02d分", timer / 60);
		str2.Format("%02d秒", timer % 60);
		str += str1;
		str += str2;
		SetDlgItemText(IDC_EDIT3ST, str);
		UpdateData(true);
		writein.SetReadOnly(true);
		str3.Format("%d", WriteIn.GetLength());
		MessageBox(str3);
	}
	CButton *pBtn = (CButton *)GetDlgItem(IDC_BUTTON3SM);//提交以后就不能在进行操作
	if (pBtn != NULL)
	{
		pBtn->EnableWindow(false);
	}
}


void CAboutDlg::OnBnClickedOk()
{
	// TODO:  在此添加控件通知处理程序代码
	CDialogEx::OnOK();
}


void CMy0131124848Dlg::OnTimer(UINT_PTR nIDEvent)//倒计时运行
{
	// TODO:  在此添加消息处理程序代码和/或调用默认值
	CDialogEx::OnTimer(nIDEvent);
	CString str="\r\n考试剩余时间\r\n\r\n", str1, str2;
	int Minute, Second; //分，秒
	if (sumTimer == timer+1)
	{
		writein.SetReadOnly(true);
		CString str = "\r\n您考试所用时间为\r\n\r\n", str1, str2;
		str1.Format("%02d分", sumTimer / 60);
		str2.Format("%02d秒", sumTimer % 60);
		str += str1;
		str += str2;
		SetDlgItemText(IDC_EDIT3ST, str);
	}
	if (count != 0)
	{
		Minute = count / 60; //分 
		Second = count % 60;  //秒
		if (Second == 0){
			Second = 59;
			if (Minute > 0)
				Minute = Minute - 1;

		}
		else{
			Second = Second - 1;
		}
		str2.Format("%02d分", Minute);
		str1 = str1 + str2;
		str2.Format("%02d秒", Second);
		str1 = str1 + str2;
		str += str1;
		SetDlgItemText(IDC_EDIT3ST, str);
		if (Minute == 0 && Second == 0)
			KillTimer(1);
		count = count - 1;
		timer += 1;
	}
	else{
		return;
	}
}


HBRUSH CMy0131124848Dlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)//设置倒计时字体颜色
{
	HBRUSH hbr = CDialogEx::OnCtlColor(pDC, pWnd, nCtlColor);
	if (pWnd->GetDlgCtrlID() == IDC_EDIT3ST)//注意此处的（pWnd->），否则没效果
	{
		pDC->SetTextColor(RGB(255, 2, 255));
		//pDC->SetBkColor(RGB(255, 255, 0));//设置文本背景色
		//pDC->SetBkMode(TRANSPARENT);//设置背景透明
	}
	// TODO:  在此更改 DC 的任何特性

	// TODO:  如果默认的不是所需画笔，则返回另一个画笔
	return hbr;
}


void CMy0131124848Dlg::OnBnClickedButton4pt()//打印成绩单按钮
{
	// TODO:  在此添加控件通知处理程序代码
	UpdateData(true);
	double speed = WriteIn.GetLength() / 2 / timer;
	double p_accuracy = atof(percentage_accuracy);
	double p_speed = atof(percentage_speed);
	double score = 0;
	score = p_accuracy * 4 + p_speed*speed;
	CString temp,t1,t2,t3,t4;
	t1 = "准考证号 : ";
	t1 += ExamNumber;
	t1 += "\r\n";
	t2 = "身份证号码 : ";
	t2 += IDNumber;
	t2 += "\r\n";
	t3 = "您的成绩为 : ";
	temp.Format("%2f", score);
	temp += "\r\n";
	t4 = "您输入的内容为 : ";
	t4 += WriteIn;
	t1 += t2;
	t1 += t3;
	t1 += temp;
	t1 += t4;
	MessageBox(t1);
	//CButton *pBtn = (CButton *)GetDlgItem(IDC_BUTTON4PT);//打印成绩单以后就不能在进行操作
	//if (pBtn != NULL)
	//{
	//	pBtn->EnableWindow(false);
	//}
}


void CMy0131124848Dlg::OnEnSetfocusEdit5wi()//清除编辑框的默认内容
{
	// TODO:  在此添加控件通知处理程序代码
	if (WIsign == 0&&WriteIn!="")
	{
		SetDlgItemText(IDC_EDIT5WI, "");
		WIsign++;
	}
}


float similarity(CString str1, CString str2)
{
	int len1 = str1.GetLength();
	int len2 = str2.GetLength();
	int **dif = new int*[len1 + 1];
	for (int i = 0; i < len1 + 1; ++i){
		dif[i] = new int[len2 + 1];
	}
	for (int i = 0; i < len1; i++)
	{
		dif[i][0] = i;
	}
	for (int i = 0; i < len2; i++)
	{
		dif[0][i] = i;
	}
	int temp;
	for (int i = 0; i < len1; i++)
	{
		for (int j=0; j < len2; j++)
		{
			if (str1.GetAt(i) == str2.GetAt(j))
			{
				temp = 0;
			}
			else
			{
				temp = 1;
			}
			dif[i][j] = min(dif[i - 1][j], dif[i][j - 1]);
			dif[i][j] = min(dif[i][j], dif[i][j]);
		}
	}
	return 1 - (float)(dif[len1][len2] / max(str1.GetLength(), str2.GetLength()));
}
